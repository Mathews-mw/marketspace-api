generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
  CUSTOMER_SELLER
}

model User {
  id        String    @id @unique @default(uuid())
  name      String
  email     String    @unique
  phone     String    @unique
  password  String
  role      UserRole  @default(CUSTOMER)
  avatar    String?
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  session  Session?
  accounts Account[]
  tokens   Token[]
  products Product[]

  @@map("users")
}

enum AccountProvider {
  CREDENTIALS
  GOOGLE
  GITHUB
}

model Account {
  id                String          @id @unique @default(uuid())
  userId            String          @map("user_id")
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime?       @map("updated_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, provider])
  @@map("accounts")
}

model Session {
  id         String   @id @unique @default(uuid())
  userId     String   @unique @map("user_id")
  token      String
  expiresAt  DateTime @map("expires_at")
  registerAt DateTime

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("sessions")
}

enum TokenType {
  PASSWORD_RECOVER
  PASSWORD_RESET
}

model Token {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("tokens")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String
  isNew       Boolean   @map("is_new")
  price       Float
  acceptTrade Boolean   @map("accept_trade")
  userId      String    @map("user_id")
  isActive    Boolean   @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  productImages  ProductImage[]
  paymentMethods PaymentMethod[]

  @@map("products")
}

model ProductImage {
  id        String    @id @default(uuid())
  title     String
  url       String
  productId String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  product Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("product_images")
}

enum PaymentType {
  PIX
  BOLETO
  DEBITO
  CREDITO
  DINHEIRO
  DEPOSITO
}

model PaymentMethod {
  id        String      @id @default(uuid())
  type      PaymentType
  productId String

  product Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("payment_methods")
}
